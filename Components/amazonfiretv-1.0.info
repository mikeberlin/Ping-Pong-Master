{"Name":"Amazon Fire TV SDK","Id":702,"Alias":"amazonfiretv","Description":"Amazon Fire TV SDK is a Xamarin.Android binding for the [Amazon Fire TV SDK][1] provided by Amazon.  Amazon Fire TV is Android compatible and with Xamarin.Android you can offer your apps to customers on their TV.  The Amazon Fire TV SDK provides APIs for notifications and several types of game controllers.\n\n###Notifications\n\nThe Amazon Fire TV SDK includes notifications designed for TV use. The notifications API for Fire TV is based on the Android notifications API. \n\n\n\n###Game Controllers\n\nThe GameController API, part of the Amazon Fire TV SDK, provides input management features for game controllers. It is especially useful for game development, including the ability to identify player numbers, and for handling controller input on a frame-based basis (inside a game loop).\n\n[1]: https://developer.amazon.com/public/solutions/devices/fire-tv\n","Version":"1.0","Summary":"Engage new audiences by bringing your existing apps and games to the living room.","QuickStart":"## Notifications API\n\nThe Android Fire TV SDK provides a way to create, show and cancel notifications on a TV.  The Fire TV notification API are based on [Android notifications][1].  To show notifications on Fire TV you **must** use the Fire TV notifications API.  For more info see the [Notifications API][2] doc an Amazon\u0027s site. \n\nThe notification API supports two types of notifications:\n\n - `BuilderType.Info`, for general messages to the user, with optional actions.\n - `BuilderType.MediaInfo`, for information on media (artist, title) playing in the background. \n\nCreate a notification with the `AmazonNotification.Builder` class similar to the methods used with Android Notifications.  The `AmazonNotification.Builder` class provides a new method `SetType` to indicate the type (`BuilderType.Info` or `BuilderType.MediaInfo`) of notification that is intended.  \n \n \n```csharp\nusing Amazon.Device.Notification;\n...\n\nvar builder = new AmazonNotification.Builder (ApplicationContext);\nbuilder.SetSmallIcon (Resource.Drawable.ic_launcher);\nbuilder.SetContentTitle (title);\nbuilder.SetContentText (text);\nbuilder.SetType (BuilderType.Info);\n```\n\nRegister the notification with the `AmazonNotificationManager`.\n\n```csharp\nvar notificationManager = GetSystemService (Context.NotificationService)\n\t.JavaCast \u003cAmazonNotificationManager\u003e ();\n\nnotificationManager.Notify (notificationId, builder.Build ());\n``` \n\n## GameController API\n\nThe GameController class is included with the Amazon Fire TV SDK. GameController provides features especially useful for games, including:\n\n - Methods to associate game controllers with the player numbers as defined by Amazon Fire TV.\n - Methods to query controller state at any time.\n - Input event constants specific to game controllers.\n - Behavior to enable you to process game controller input events on a per-frame basis (that is, within a game loop).\n \nFor more info see the [GameController API][3] doc an Amazon\u0027s site. \n\nYou must initialize the `GameController` in your activitity\u0027s `OnCreate` method before using any of the methods of the `GameController` class.\n\n```csharp\nusing Amazon.Device.GameController;\n...\n\nprotected override void OnCreate (Bundle bundle)\n{\n\tbase.OnCreate (bundle);\n\n\t// Initialize with context so GameController can invoke system services\n\tGameController.Init(this);\n}\n```\n\nUse the `GameController.GetControllerByPlayer` static method with a player number to retrieve a `GameController` object for use with frame-based event input. Player numbers are assigned by the system and can be from 1 to 4. Not all player numbers may have associated controllers. If this is the case `GameController.GetControllerbyPlayer` throws the `GameController.PlayerNumberNotFoundException` exception.\n\n```csharp\nusing Amazon.Device.GameController;\n...\n\n// Iterate through all players\nfor (int n = 0; n \u003c GameController.MaxPlayers; n++) {\n\n\tGameController gameController = null;\n\ttry {\n\t\tgameController =\n\t\t\tGameController.GetControllerByPlayer (n + 1);\n\t} catch (GameController.PlayerNumberNotFoundException e) {\n\t}\n\t...\n}\n```\n\nForward the key and motion events from an activity to the `GameController` class to enable the GameController API to manage you input events.  This is achieved by overriding the `OnKeyDown`, `OnKeyUp` and `OnGenericMotionEvent` methods.\n\n```csharp\nusing Amazon.Device.GameController;\n...\n\n[Activity (Label = \"@string/app_name\", MainLauncher = true)]\npublic class GameActivity : Activity\n{\n\tpublic override bool OnKeyDown (Keycode keyCode, KeyEvent @event)\n\t{\n\t\tbool handled = false;\n\t\ttry {\n\t\t\thandled = GameController.OnKeyDown ((int)keyCode, @event);\n\t\t} catch (GameController.DeviceNotFoundException) {\n\t\t}\n\t\treturn handled || base.OnKeyDown (keyCode, @event);\n\t}\n\n\tpublic override bool OnKeyUp (Keycode keyCode, KeyEvent @event)\n\t{\n\t\tbool handled = false;\n\t\ttry {\n\t\t\thandled = GameController.OnKeyUp ((int)keyCode, @event);\n\t\t} catch (GameController.DeviceNotFoundException) {\n\t\t}\n\t\treturn handled || base.OnKeyUp (keyCode, @event);\n\t}\n\n\tpublic override bool OnGenericMotionEvent (MotionEvent e)\n\t{\n\t\tbool handled = false;\n\t\ttry {\n\t\t\thandled = GameController.OnGenericMotionEvent (e);\n\t\t} catch (GameController.DeviceNotFoundException) {\n\t\t}\n\t\treturn handled || base.OnGenericMotionEvent (e);\n\t}\n}\n```\n\nImplement the game loop on your own thread. Inside the `Run` method for that thread, test for input and render each frame based on that input.\n\nWithin the loop, use `GameController.StartFrame` to reset the input event queue between frames. \n\n```csharp\nusing Amazon.Device.GameController;\n...\n\nwhile (running) {\n\tGameController.StartFrame ();\n\n\t//Draw the background\n\n\t//Draw each player\n\tfor (int n = 0; n \u003c GameController.MaxPlayers; n++) { \n\t\tGameController gameController = null;        \n\t\ttry {\n\t\t\tgameController = GameController.GetControllerByPlayer (n + 1);\n\t\t} catch (GameController.PlayerNumberNotFoundException) {\n\t\t}\n\n\t\tif (gameController != null) {\n\t\t\t//Move player n on the board\n\t\t\tfloat x1 = gameController.GetAxisValue (GameControllerAxis.StickLeftX);\n\t\t\tfloat y1 = gameController.GetAxisValue (GameControllerAxis.StickLeftY);\n\n\t\t\tif (gameController.IsButtonPressed (GameControllerButton.TriggerLeft)) {\n\t\t\t\t//Draw laser beam for player n\n\t\t\t}\n\t\t}\n\t}\n\n\t//Draw the foreground\n}\n```\n\n##Connecting ADB\n\nIn order to deploy apps to your Amazon Fire TV you must use Android Debug Bridge (ADB.)  Your computer and Fire TV must be on the same network.\n\n###Turn on ADB Debugging\n1. From the main (Launcher) screen of Amazon Fire TV, select **Settings.**\n2. Select **System \u003e Developer Options.**\n3. Select **ADB Debugging.**  \n\n###Get the IP Address\n1. From the main screen of Amazon Fire TV, select **Settings.**\n2. Select System \u003e About \u003e Network.  \n   Make note of the IP address listed on this screen.\n   \n###Connect ADB\n1. From a cmd window or terminal change directory to the platform-tools directory of the Android SDK location on disk.  The Android SDK location can be found in the Xamarin Studio Preferences box under **Projects \u003e SDK Locations \u003e Android.**  \n   \n2. Ensure that this ADB server is running.  \n   `adb kill-server`  \n   `adb start-server` \n    \n3. Connect ADB to the Fire TV with the \u0026lt;ipaddress\u0026gt; noted in the previous section.  \n   `adb connect \u003cipaddress\u003e`\n\n4. Verify that your computer is connected to the Fire TV.  \n   `adb devices`  \n   \n   ADB will respond with the following message.  \n   List of devices attached  \n   \u0026lt;ipaddress\u0026gt;:5555  device\n\n\n[1]: http://developer.android.com/guide/topics/ui/notifiers/notifications.html\n[2]: https://developer.amazon.com/sdk/asb/notifications.html\n[3]: https://developer.amazon.com/sdk/asb/input-mgmt-games.html\n\n","Hash":"da560e3065b784713983950c73e93ed8","TargetPlatforms":["android"],"TrialHash":null}